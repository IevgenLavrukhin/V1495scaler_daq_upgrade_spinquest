/******************************************************************************
*
* Header file for use General USER defined rols with CODA crl (version 2.0)
* 
*   This file implements use of the SIS 3610 Module as a trigger interface
*   (substitute for the JLAB TI Board)
*
*    Supports to Modes of operation
*      code = 1  - Control Input 1 only generates a trigger (type 1 only)
*      code = 2  - Control Inputs 1-4 all will generate a trigger
*                  Trigger type will be determined by input pattern
*
*                             DJA   Nov 2000
*
*******************************************************************************/
#ifndef __GEN_ROL__
#define __GEN_ROL__

static int GEN_handlers,GENflag;
static int GEN_isAsync;
static unsigned int *GENPollAddr = NULL;
static unsigned int GENPollMask;
static unsigned int GENPollValue;
static unsigned long GEN_prescale = 1;
static unsigned long GEN_count = 0;

#define GEN_VEC      0xe0

/* Put any global user defined variables needed here for GEN readout */

#include "v1495scaler.h"
extern volatile struct v1495_vme_reg* v1495_vreg;
extern volatile struct v1495_control_reg* v1495_creg;

#ifdef VXWORKSPPC
#define INUM_TO_IVEC(intNum)    ((VOIDFUNCPTR *) (intNum))
#else
#define INUM_TO_IVEC(intNum)    ((VOIDFUNCPTR *) (intNum<<2))
#endif

void
GEN_int_handler()
{
/* Clear inturrupt source (RORA Mode) */
  sysIntDisable(v1495_VME_INT_LEVEL);
  v1495_vreg->int_lv = 0;
 
  //printf("GEN_int_handler\n");

  sysIntEnable(v1495_VME_INT_LEVEL);

  theIntHandler(GEN_handlers);                   /* Call our handler */
}



/*----------------------------------------------------------------------------
  gen_trigLib.c -- Dummy trigger routines for GENERAL USER based ROLs

 File : gen_trigLib.h

 Routines:
           void gentriglink();       link interrupt with trigger
	   void gentenable();        enable trigger
	   void gentdisable();       disable trigger
	   char genttype();          return trigger type 
	   int  genttest();          test for trigger  (POLL Routine)
------------------------------------------------------------------------------*/


static void
gentriglink(int code, VOIDFUNCPTR isr)
{
  int int_vec;
  int_vec =  INUM_TO_IVEC(GEN_VEC);
  if (v1495_vreg) {
    v1495_vreg->ctrlr = 0; // RORA
    v1495_vreg->int_ID = GEN_VEC;
    printf("gentriglink: int_ID readback %d\n",v1495_vreg->int_ID);
  } else {
    printf("gentriglink: ERROR: v1495_vreg uninitialized\n");
  }

#ifdef VXWORKSPPC
  if((intDisconnect(int_vec) !=0))
     printf("Error disconnecting Interrupt\n");
#endif
  intConnect(int_vec,isr,0);
}

static void 
gentenable(int code, int intMask)
{
  v1495IntEnable();
  sysIntEnable(v1495_VME_INT_LEVEL);
}

static void 
gentdisable(int code, int intMask)
{
  sysIntDisable(v1495_VME_INT_LEVEL);
  v1495IntDisable();
}

static unsigned int
genttype(int code)
{
  if(v1495_creg->scaler_en_spill == 0x0000){
    return(2);
  }else{
    return(1);
  }
}

static int 
genttest(int code)
{
  unsigned int ret;

  if((GENflag>0) && (GENPollAddr > 0)) {
    GEN_count++;
    
    ret = (*GENPollAddr)&(GENPollMask);
    if(ret == GENPollValue)
      return(1);
    else
      return(0);

  } else {
    return(0);
  }
}



/* Define CODA readout list specific Macro routines/definitions */

#define GEN_TEST  genttest

#define GEN_INIT { GEN_handlers =0;GEN_isAsync = 0;GENflag = 0;}

#define GEN_ASYNC(code,id)  {printf("linking async GEN trigger to id %d \n",id); \
			       GEN_handlers = (id);GEN_isAsync = 1;gentriglink(code,GEN_int_handler);}

#define GEN_SYNC(code,id)   {printf("linking sync GEN trigger to id %d \n",id); \
			       GEN_handlers = (id);GEN_isAsync = 0;}

#define GEN_SETA(code) GENflag = code;

#define GEN_SETS(code) GENflag = code;

#define GEN_ENA(code,val) gentenable(code, val);

#define GEN_DIS(code,val) gentdisable(code, val);

#define GEN_CLRS(code) GENflag = 0;

#define GEN_GETID(code) GEN_handlers

#define GEN_TTYPE genttype

#define GEN_START(val)	 {;}

#define GEN_STOP(val)	 {;}

#define GEN_ENCODE(code) (code)


#endif

